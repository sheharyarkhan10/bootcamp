CREATE PROCEDURE AddStudent
    @FirstName NVARCHAR(50),
    @LastName NVARCHAR(50),
    @Age INT,
    @CourseID INT
AS
BEGIN
    INSERT INTO Students (FirstName, LastName, Age, CourseID)
    VALUES (@FirstName, @LastName, @Age, @CourseID);
END


2. Stored Procedure to Update a Student's Age:

CREATE PROCEDURE UpdateStudentAge
    @StudentID INT,
    @NewAge INT
AS
BEGIN
    UPDATE Students
    SET Age = @NewAge
    WHERE StudentID = @StudentID;
END



3. Stored Procedure to Delete a Student:

CREATE PROCEDURE DeleteStudent
    @StudentID INT
AS
BEGIN
    DELETE FROM Students
    WHERE StudentID = @StudentID;
END


4. Stored Procedure to List All Students:


CREATE PROCEDURE ListAllStudents
AS
BEGIN
    SELECT s.StudentID, s.FirstName, s.LastName, s.Age, c.CourseName
    FROM Students s
    JOIN Courses c ON s.CourseID = c.CourseID;
END






using System;
using System.Data;
using System.Data.SqlClient;

class Program
{
    static void Main(string[] args)
    {
        string connectionString = "Server=cmdlhrdb01;Database=DemoDB;Trusted_Connection=True;";
        
        using (SqlConnection connection = new SqlConnection(connectionString))
        {
            // 1. Execute Stored Procedure to Get All Employees
            using (SqlCommand command = new SqlCommand("GetAllEmployees", connection))
            {
                command.CommandType = CommandType.StoredProcedure;
                connection.Open();
                SqlDataReader reader = command.ExecuteReader();
                while (reader.Read())
                {
                    Console.WriteLine($"ID: {reader["ID"]}, Name: {reader["Name"]}, Age: {reader["Age"]}, DepartmentID: {reader["DepartmentID"]}");
                }
                connection.Close();
            }

            // 2. Execute Stored Procedure to Add an Employee
            using (SqlCommand command = new SqlCommand("AddEmployee", connection))
            {
                command.CommandType = CommandType.StoredProcedure;
                command.Parameters.AddWithValue("@Name", "Hamza");
                command.Parameters.AddWithValue("@Age", 30);
                command.Parameters.AddWithValue("@DepartmentID", 1);
                connection.Open();
                command.ExecuteNonQuery();
                connection.Close();
            }

            // 3. Execute Stored Procedure to Update an Employee's Age
            using (SqlCommand command = new SqlCommand("UpdateEmployeeAge", connection))
            {
                command.CommandType = CommandType.StoredProcedure;
                command.Parameters.AddWithValue("@ID", 1);
                command.Parameters.AddWithValue("@NewAge", 41);
                connection.Open();
                command.ExecuteNonQuery();
                connection.Close();
            }

            // 4. Execute Stored Procedure to Delete an Employee
            using (SqlCommand command = new SqlCommand("DeleteEmployee", connection))
            {
                command.CommandType = CommandType.StoredProcedure;
                command.Parameters.AddWithValue("@ID", 1);
                connection.Open();
                command.ExecuteNonQuery();
                connection.Close();
            }
        }
    }
}



using System;
using System.Data;
using System.Data.SqlClient;

class Program
{
    static void Main(string[] args)
    {
        string connectionString = "Server=cmdlhrdb01;Database=DemoDB;Trusted_Connection=True;";

        using (SqlConnection connection = new SqlConnection(connectionString))
        {
            // Other tasks from previous code...

            // Task 9 - Advanced Reports

            // 1. List the names of students who are not enrolled in any course.
            ListStudentsNotEnrolled(connection);

            // 2. Find the most popular course (the course with the most students enrolled).
            FindMostPopularCourse(connection);

            // 3. List the students who are older than the average age of students.
            ListStudentsOlderThanAverageAge(connection);

            // 4. Find the total number of students and average age for each course.
            TotalStudentsAndAverageAgePerCourse(connection);

            // 5. List the courses that have no students enrolled in them.
            ListCoursesWithNoStudents(connection);

            // 6. List students who share courses with a specific student.
            ListStudentsSharingCoursesWithSpecificStudent(connection, studentId);

            // 7. For each course, list the youngest and oldest student.
            ListYoungestAndOldestStudentForEachCourse(connection);
        }
    }

    static void ListStudentsNotEnrolled(SqlConnection connection)
    {
        using (SqlCommand command = new SqlCommand("ListStudentsNotEnrolled", connection))
        {
            command.CommandType = CommandType.StoredProcedure;
            connection.Open();
            SqlDataReader reader = command.ExecuteReader();
            Console.WriteLine("Students not enrolled in any course:");
            while (reader.Read())
            {
                Console.WriteLine($"Name: {reader["Name"]}");
            }
            connection.Close();
        }
    }

    static void FindMostPopularCourse(SqlConnection connection)
    {
        using (SqlCommand command = new SqlCommand("FindMostPopularCourse", connection))
        {
            command.CommandType = CommandType.StoredProcedure;
            connection.Open();
            SqlDataReader reader = command.ExecuteReader();
            reader.Read();
            Console.WriteLine($"Most popular course: {reader["CourseName"]}");
            connection.Close();
        }
    }

    static void ListStudentsOlderThanAverageAge(SqlConnection connection)
    {
        using (SqlCommand command = new SqlCommand("ListStudentsOlderThanAverageAge", connection))
        {
            command.CommandType = CommandType.StoredProcedure;
            connection.Open();
            SqlDataReader reader = command.ExecuteReader();
            Console.WriteLine("Students older than the average age:");
            while (reader.Read())
            {
                Console.WriteLine($"Name: {reader["Name"]}, Age: {reader["Age"]}");
            }
            connection.Close();
        }
    }

    static void TotalStudentsAndAverageAgePerCourse(SqlConnection connection)
    {
        using (SqlCommand command = new SqlCommand("TotalStudentsAndAverageAgePerCourse", connection))
        {
            command.CommandType = CommandType.StoredProcedure;
            connection.Open();
            SqlDataReader reader = command.ExecuteReader();
            Console.WriteLine("Course Statistics:");
            while (reader.Read())
            {
                Console.WriteLine($"Course: {reader["CourseName"]}, Total Students: {reader["TotalStudents"]}, Average Age: {reader["AverageAge"]}");
            }
            connection.Close();
        }
    }

    static void ListCoursesWithNoStudents(SqlConnection connection)
    {
        using (SqlCommand command = new SqlCommand("ListCoursesWithNoStudents", connection))
        {
            command.CommandType = CommandType.StoredProcedure;
            connection.Open();
            SqlDataReader reader = command.ExecuteReader();
            Console.WriteLine("Courses with no students enrolled:");
            while (reader.Read())
            {
                Console.WriteLine($"Course: {reader["CourseName"]}");
            }
            connection.Close();
        }
    }

    static void ListStudentsSharingCoursesWithSpecificStudent(SqlConnection connection, int studentId)
    {
        using (SqlCommand command = new SqlCommand("ListStudentsSharingCoursesWithSpecificStudent", connection))
        {
            command.CommandType = CommandType.StoredProcedure;
            command.Parameters.AddWithValue("@StudentID", studentId);
            connection.Open();
            SqlDataReader reader = command.ExecuteReader();
            Console.WriteLine($"Students sharing courses with student ID {studentId}:");
            while (reader.Read())
            {
                Console.WriteLine($"Name: {reader["Name"]}");
            }
            connection.Close();
        }
    }

    static void ListYoungestAndOldestStudentForEachCourse(SqlConnection connection)
    {
        using (SqlCommand command = new SqlCommand("ListYoungestAndOldestStudentForEachCourse", connection))
        {
            command.CommandType = CommandType.StoredProcedure;
            connection.Open();
            SqlDataReader reader = command.ExecuteReader();
            Console.WriteLine("Youngest and Oldest Students for Each Course:");
            while (reader.Read())
            {
                Console.WriteLine($"Course: {reader["CourseName"]}, Youngest: {reader["YoungestStudentName"]}, Oldest: {reader["OldestStudentName"]}");
            }
            connection.Close();
        }
    }
}
